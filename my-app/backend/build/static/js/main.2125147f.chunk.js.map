{"version":3,"sources":["components/Persons.js","services/persons.js","App.js","index.js"],"names":["Person","person","deleteFunction","name","number","onClick","value","Persons","persons","map","key","id","baseUrl","axios","get","then","response","data","newObject","post","put","delete","PersonForm","addPerson","nameValue","nameHandler","numberValue","numberHandler","onSubmit","onChange","type","Filter","filterHandler","Notification","message","notificationType","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filterValue","setFilterValue","showAll","setShowAll","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personService","initialContacts","personsToShow","filter","toLowerCase","includes","updatePerson","updateId","find","p","returnedPerson","setTimeout","catch","error","event","target","length","preventDefault","personObject","some","window","confirm","concat","personToBeDeleted","res","ReactDOM","render","document","getElementById"],"mappings":"+NAgBMA,EAAS,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,eACrB,OACI,4BACI,4BAAKD,EAAOE,MACZ,4BAAKF,EAAOG,QACZ,4BACI,4BACEC,QAASH,EACTI,MAAOL,EAAOE,MAFhB,aASDI,EA5BC,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,QAASN,EAAoB,EAApBA,eACvB,OACI,+BACI,+BACKM,EAAQC,KAAI,SAAAR,GAAM,OACf,kBAAC,EAAD,CAAQS,IAAKT,EAAOU,GAAIV,OAAQA,EAAQC,eAAgBA,U,gBCLtEU,EAAU,eAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAACN,EAAIO,GAEhB,OADgBL,IAAMO,IAAN,UAAaR,EAAb,YAAwBD,GAAMO,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACN,GAEZ,OADgBE,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BD,IAC5BI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCuIvCK,G,MAAa,SAAC,GAAqE,IAApEC,EAAmE,EAAnEA,UAAWC,EAAwD,EAAxDA,UAAWC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,cACjE,OACI,0BAAMC,SAAUL,GACZ,qCAEI,2BACEjB,MAAOkB,EACPK,SAAUJ,KAGhB,uCAEI,2BACEnB,MAAOoB,EACPG,SAAUF,KAGhB,6BACI,4BAAQG,KAAK,UAAb,WAOVC,EAAS,SAAC,GAA4B,IAA3BzB,EAA0B,EAA1BA,MAAO0B,EAAmB,EAAnBA,cACpB,OACI,uCAEI,2BACE1B,MAAOA,EACPuB,SAAUG,MAOlBC,EAAe,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,iBAC5B,OAAgB,OAAZD,EACO,KAIP,yBAAKE,UAAWD,GACXD,IAKEG,EA1MH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACP9B,EADO,KACE+B,EADF,OAEgBD,mBAAS,IAFzB,mBAEPE,EAFO,KAEEC,EAFF,OAGoBH,mBAAS,IAH7B,mBAGPI,EAHO,KAGIC,EAHJ,OAIwBL,mBAAS,IAJjC,mBAIPM,EAJO,KAIMC,EAJN,OAKgBP,oBAAS,GALzB,mBAKPQ,EALO,KAKEC,EALF,OAM0BT,mBAAS,MANnC,mBAMPU,EANO,KAMOC,EANP,OAO8BX,mBAAS,MAPvC,mBAOPY,EAPO,KAOSC,EAPT,KAUdC,qBAAU,WACNC,IAEGtC,MAAK,SAAAuC,GACJf,EAAWe,QAEhB,IAGH,IAAMC,EAAgBT,EAChBtC,EACAA,EAAQgD,QAAO,SAAAvD,GAAM,OAAKA,EAAOE,KAAKsD,cAAcC,SAASd,EAAYa,gBAAkBxD,EAAOG,OAAOqD,cAAcC,SAASd,EAAYa,kBA6D5IE,EAAe,SAAC1D,GAClB,IAAM2D,EAAWpD,EAAQqD,MAAK,SAAAC,GAAC,OAAIA,EAAE3D,OAASF,EAAOE,QAAMQ,GAC3D0C,EACUO,EAAU3D,GACjBc,MAAK,SAAAgD,GACFxB,EAAW/B,EAAQC,KAAI,SAAAqD,GAAC,OAAIA,EAAE3D,OAASF,EAAOE,KAAO2D,EAAIC,MACzDZ,EAAkB,WAAD,OACFlD,EAAOE,KADL,wBACyBF,EAAOG,SAEjD4D,YAAW,WACPb,EAAkB,QACnB,QAGNc,OAAM,SAAAC,GACHjB,EAAgB,WAAD,OACFhD,EAAOE,KADL,sCAGf6D,YAAW,WACPf,EAAgB,QACjB,KAEHV,EAAW/B,EAAQgD,QAAO,SAAAM,GAAC,OAAIA,EAAE3D,OAASF,EAAOE,aA+B3D,OACI,6BACI,yCACA,kBAAC,EAAD,CAAc+B,QAASc,EAAcb,iBAAiB,UACtD,kBAAC,EAAD,CAAcD,QAASgB,EAAgBf,iBAAiB,YACxD,kBAAC,EAAD,CAAQ7B,MAAOsC,EAAaZ,cA1GT,SAACmC,GACxBtB,EAAesB,EAAMC,OAAO9D,OACxB6D,EAAMC,OAAO9D,MAAM+D,OAAS,EACxBvB,GACAC,GAAW,GAGfA,GAAW,MAqGX,yCACA,kBAAC,EAAD,CAAYxB,UAjGF,SAAC4C,GACfA,EAAMG,iBAEN,IAAMC,EAAe,CACjBpE,KAAMqC,EACNpC,OAAQsC,GAIRlC,EAAQgE,MAAK,SAAAvE,GAAM,OAAIA,EAAOE,OAASqC,KACnCiC,OAAOC,QAAP,UAAkBlC,EAAlB,4EACAmB,EAAaY,GAGjBlB,EACUkB,GACPxD,MAAK,SAAAgD,GACAxB,EAAW/B,EAAQmE,OAAOZ,IAC1BZ,EAAkB,UAAD,OAAWoB,EAAapE,KAAxB,MACjB6D,YAAW,WACPb,EAAkB,QACpB,QAENc,OAAM,SAAAC,GACHjB,EAAgBiB,EAAMlD,SAASC,KAAKiB,SACpC8B,YAAW,WACPf,EAAgB,QACjB,QAIdR,EAAW,IACXE,EAAa,KAiEyBnB,UAAWgB,EAASf,YAvHrC,SAAC0C,GACtB1B,EAAW0B,EAAMC,OAAO9D,QAsHiEoB,YAAagB,EAAWf,cAlH1F,SAACwC,GACxBxB,EAAawB,EAAMC,OAAO9D,UAmHtB,uCACA,kBAAC,EAAD,CAASE,QAAS+C,EAAerD,eArCpB,SAACiE,GAClB,IAAMS,EAAoBpE,EAAQqD,MAAK,SAAA5D,GAAM,OAAIA,EAAOE,OAASgE,EAAMC,OAAO9D,SAE1EmE,OAAOC,QAAP,iBAAyBE,EAAkBzE,KAA3C,OACAkD,EACUuB,EAAkBjE,IACzBI,MAAK,SAAA8D,GACFtC,EAAW/B,EAAQgD,QAAO,SAAAvD,GAAM,OAAIA,EAAOE,OAASyE,EAAkBzE,SACtEgD,EAAkB,YAAD,OAAayB,EAAkBzE,KAA/B,MACjB6D,YAAW,WACPb,EAAkB,QACnB,QAENc,OAAM,SAAAC,GACHjB,EAAgB,WAAD,OACF2B,EAAkBzE,KADhB,yCAGf6D,YAAW,WACPf,EAAgB,QACjB,KAEHV,EAAW/B,EAAQgD,QAAO,SAAAvD,GAAM,OAAIA,EAAOE,OAASyE,EAAkBzE,iBCnIxF2E,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.2125147f.chunk.js","sourcesContent":["import React from 'react'\n\n// Taulukon rakentaminen ja koko puhelinluettelon hallinta\nconst Persons = ({persons, deleteFunction}) => {\n    return (\n        <table>\n            <tbody>\n                {persons.map(person =>\n                    <Person key={person.id} person={person} deleteFunction={deleteFunction}/>\n                )}\n            </tbody>\n        </table>\n    )\n}\n\n// Yksittäisen yhteystiedon renderöinti taulukkoon\nconst Person = ({person, deleteFunction}) => {\n    return (\n        <tr>\n            <td>{person.name}</td> \n            <td>{person.number}</td>\n            <td>\n                <button\n                  onClick={deleteFunction}\n                  value={person.name}\n                >Delete</button>\n            </td>\n        </tr>\n    )\n}\n\nexport default Persons","// Palvelukomponentti, joka vastaa palvelimen kanssa kommunikoinnista\nimport axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, {useState, useEffect} from 'react'\nimport Persons from './components/Persons'\nimport personService from './services/persons'\nimport './index.css'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filterValue, setFilterValue] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    const [successMessage, setSuccessMessage] = useState(null)\n\n    // Effect-hook, joka hakee sovelluksen alkutilan määritellystä osoitteesta\n    useEffect(() => {\n        personService\n          .getAll()\n          .then(initialContacts => {\n            setPersons(initialContacts)\n          })\n    }, [])\n\n    // Varsinainen filtteri\n    const personsToShow = showAll\n        ? persons\n        : persons.filter(person => (person.name.toLowerCase().includes(filterValue.toLowerCase()) || person.number.toLowerCase().includes(filterValue.toLowerCase())))\n    \n    // Vastaa nimikentän muutoksiin reagoimisesta\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    // Vastaa numerokentän muutoksiin reagoimisesta\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    // Vastaa filter-tekstikentän muutoksiin reagoimisesta\n    const handleFilterChange = (event) => {\n        setFilterValue(event.target.value)\n        if (event.target.value.length > 0 ) {\n            if (showAll) {\n                setShowAll(false)\n            }\n        } else {\n            setShowAll(true)\n        }\n    }\n\n    // Vastaa uuden henkilön lisäämisestä\n    const addPerson = (event) =>{\n        event.preventDefault()\n\n        const personObject = {\n            name: newName,\n            number: newNumber\n        }\n\n        // TÄMÄN TOIMIVUUS PITÄÄ VARMISTAA - FIKSAA ERROR.RESPONSE.DATA NÄKYVÄKSI, JONKA JÄLKEEN BUILDAA BÄKKIIN.\n        if (persons.some(person => person.name === newName)) {\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n                updatePerson(personObject)\n            }\n        } else {\n            personService\n              .create(personObject)\n              .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    setSuccessMessage(`Added '${personObject.name}'`)\n                    setTimeout(() => {\n                        setSuccessMessage(null)\n                    },5000)\n               })\n               .catch(error => {\n                   setErrorMessage(error.response.data.message)\n                   setTimeout(() => {\n                       setErrorMessage(null)\n                   }, 10000)\n               })\n        }\n\n        setNewName('')\n        setNewNumber('')\n    }\n\n    // Yhteystiedon päivityksestä vastaava\n    const updatePerson = (person) => {\n        const updateId = persons.find(p => p.name === person.name).id\n        personService\n          .update(updateId, person)\n          .then(returnedPerson => {\n              setPersons(persons.map(p => p.name !== person.name ? p : returnedPerson))\n              setSuccessMessage(\n                  `Updated ${person.name}'s number to ${person.number}`\n              )\n              setTimeout(() => {\n                  setSuccessMessage(null)\n              }, 5000)\n\n          })\n          .catch(error => {\n              setErrorMessage(\n                `Person '${person.name}' was already deleted from server`\n              )\n              setTimeout(() => {\n                  setErrorMessage(null)\n              }, 5000)\n\n              setPersons(persons.filter(p => p.name !== person.name))\n          })\n    }\n\n    // Poistosta vastaava\n    const deletePerson = (event) => {\n        const personToBeDeleted = persons.find(person => person.name === event.target.value)\n\n        if (window.confirm(`Delete ${personToBeDeleted.name}?`)) {\n            personService\n              .remove(personToBeDeleted.id)\n              .then(res => {\n                  setPersons(persons.filter(person => person.name !== personToBeDeleted.name))\n                  setSuccessMessage(`Deleted '${personToBeDeleted.name}'`)\n                  setTimeout(() => {\n                      setSuccessMessage(null)\n                  }, 5000)\n              })\n              .catch(error => {\n                  setErrorMessage(\n                    `Person '${personToBeDeleted.name}' is already deleted from the server`\n                  )\n                  setTimeout(() => {\n                      setErrorMessage(null)\n                  }, 5000)\n\n                  setPersons(persons.filter(person => person.name !== personToBeDeleted.name))\n              })   \n        }\n    }\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <Notification message={errorMessage} notificationType='error' />\n            <Notification message={successMessage} notificationType='success' />\n            <Filter value={filterValue} filterHandler={handleFilterChange} />\n\n            <h2>Add a new</h2>\n            <PersonForm addPerson={addPerson} nameValue={newName} nameHandler={handleNameChange} numberValue={newNumber} numberHandler={handleNumberChange} />    \n\n            <h2>Numbers</h2>\n            <Persons persons={personsToShow} deleteFunction={deletePerson} />\n        </div>\n    )\n}\n\n// Henkilön lisäyskaavakkeen renderöinnistä vastaava komponentti\nconst PersonForm = ({addPerson, nameValue, nameHandler, numberValue, numberHandler}) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                Name: \n                <input\n                  value={nameValue}\n                  onChange={nameHandler}\n                />\n            </div>\n            <div>\n                Number:\n                <input\n                  value={numberValue}\n                  onChange={numberHandler}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\n// Filtterin renderöinnistä vastaava komponentti\nconst Filter = ({value, filterHandler}) => {\n    return (\n        <div>\n            Filter:\n            <input\n              value={value}\n              onChange={filterHandler}\n            />\n        </div>\n    )\n}\n\n// Vastaa ilmoituksen oikeanlaisesta renderöinnistä\nconst Notification = ({message, notificationType}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={notificationType}>\n            {message}\n         </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}